<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on XiuFu Guo&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/post/</link>
    <description>Recent content in Posts on XiuFu Guo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Aug 2020 22:25:19 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 145. Binary Tree Postorder Traversal</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/binary-tree-postorder-traversal/</link>
      <pubDate>Wed, 12 Aug 2020 22:25:19 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/binary-tree-postorder-traversal/</guid>
      <description>145. Binary Tree Postorder Traversal
python
1 2 3 4 5 6 7 8 9 10 11 12  class Solution: def postorderTraversal(self, root: TreeNode) -&amp;gt; List[int]: res = [] self.dfs(root, res) return res def dfs(self, root, res): if not root: return self.dfs(root.left, res) self.dfs(root.right, res) res.append(root.val)   </description>
    </item>
    
    <item>
      <title>Science Internet</title>
      <link>https://blog.xiufuguo.com/post/technology/science_internet/</link>
      <pubDate>Tue, 28 Jul 2020 14:01:03 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/technology/science_internet/</guid>
      <description>1. 配置前的准备 域名 VPS (虚拟专用服务器) 1.1 如何申请域名？ 免费：google search apply free domain name 我自己使用阿里付费域名，后面的 HTTPS 也方便，可配置自己博客域名</description>
    </item>
    
    <item>
      <title>Head First Goroutine</title>
      <link>https://blog.xiufuguo.com/post/golang/head_first_goroutine/</link>
      <pubDate>Mon, 06 Jul 2020 04:07:47 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/golang/head_first_goroutine/</guid>
      <description>深入浅出 Go 协程 一、什么是 Goroutines Goroutines 是用户空间线程。 从概念上讲，它类似于由 OS 管理的内核线程，但完全由 Go 运行时管理。 比内核线程更轻巧，更便宜。 调度程序</description>
    </item>
    
  </channel>
</rss>