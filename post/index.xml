<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Rubinera1n&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/post/</link>
    <description>Recent content in Posts on Rubinera1n&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 28 Jul 2020 14:01:03 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>科学上网</title>
      <link>https://blog.xiufuguo.com/post/technology/science_internet/</link>
      <pubDate>Tue, 28 Jul 2020 14:01:03 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/technology/science_internet/</guid>
      <description>1. 配置前的准备 域名 VPS (虚拟专用服务器) 1.1 如何申请域名？ 免费：google search apply free domain name 我自己使用阿里付费域名，后面的 HTTPS 也方便，可配置自己博客域名</description>
    </item>
    
    <item>
      <title>[LeetCode] 287. Find the Duplicate Number</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/find-the-duplicate-number/</link>
      <pubDate>Mon, 27 Jul 2020 16:11:18 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/find-the-duplicate-number/</guid>
      <description>287. Find the Duplicate Number
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def findDuplicate(self, nums: List[int]) -&amp;gt; int: slow = fast = tail = 0 while True: slow = nums[slow] fast = nums[nums[fast]] if slow == fast: break while True: slow = nums[slow] tail = nums[tail] if slow == tail: break return slow   </description>
    </item>
    
    <item>
      <title>[LeetCode] 234. Palindrome Linked List</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/palindrome-linked-list/</link>
      <pubDate>Mon, 27 Jul 2020 16:09:00 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/palindrome-linked-list/</guid>
      <description>234. Palindrome Linked List
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  class Solution: def isPalindrome(self, head: ListNode) -&amp;gt; bool: if not head: return True fast = slow = head while fast.next and fast.next.next: fast = fast.next.next slow = slow.next p = head q = self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 209. Minimum Size Subarray Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/minimum-size-subarray-sum/</link>
      <pubDate>Sun, 26 Jul 2020 22:23:58 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/minimum-size-subarray-sum/</guid>
      <description>209. Minimum Size Subarray Sum
python
1 2 3 4 5 6 7 8 9 10 11 12  class Solution: def minSubArrayLen(self, s: int, nums: List[int]) -&amp;gt; int: total = left = right = 0 res = len(nums) + 1 while right &amp;lt; len(nums): total += nums[right] while total &amp;gt;= s: res = min(res, right - left + 1) total -= nums[left] left += 1 right += 1 return res if res &amp;lt;= len(nums) else 0   </description>
    </item>
    
    <item>
      <title>[LeetCode] 167. Two Sum II - Input array is sorted</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/two-sum-ii-input-array-is-sorted/</link>
      <pubDate>Sun, 26 Jul 2020 22:22:34 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/two-sum-ii-input-array-is-sorted/</guid>
      <description>167. Two Sum II - Input array is sorted
python
1 2 3 4 5 6 7 8 9 10  class Solution: def twoSum(self, numbers: List[int], target: int) -&amp;gt; List[int]: l, r = 0, len(numbers) - 1 while l &amp;lt; r: if numbers[l] + numbers[r] == target: return [l + 1, r + 1] elif numbers[l] + numbers[r] &amp;gt; target: r -= 1 else: l += 1   </description>
    </item>
    
    <item>
      <title>[LeetCode] 75. Sort Colors</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/sort-colors/</link>
      <pubDate>Sat, 25 Jul 2020 22:18:54 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/sort-colors/</guid>
      <description>75. Sort Colors
python
1 2 3 4 5 6 7 8 9 10 11 12  class Solution: def sortColors(self, nums: List[int]) -&amp;gt; None: l, r, zero = 0, len(nums) - 1, 0 while l &amp;lt;= r: if nums[l] == 0: nums[l], nums[zero] = nums[zero], nums[l] l += 1; zero += 1 elif nums[l] == 2: nums[l], nums[r] = nums[r], nums[l] r -= 1 else: l += 1   </description>
    </item>
    
    <item>
      <title>[LeetCode] 88. Merge Sorted Array</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/merge-sorted-array/</link>
      <pubDate>Sat, 25 Jul 2020 22:18:54 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/merge-sorted-array/</guid>
      <description>88. Merge Sorted Array
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Solution: def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&amp;gt; None: i = m - 1 j = n - 1 k = m + n - 1 while i &amp;gt;= 0 and j &amp;gt;= 0: if nums1[i] &amp;gt;= nums2[j]: nums1[k] = nums1[i] i -= 1 else: nums1[k] = nums2[j] j -= 1 k -= 1 while j &amp;gt;= 0: nums1[k] = nums2[j] k -= 1 j -= 1 return   </description>
    </item>
    
    <item>
      <title>[LeetCode] 344. Reverse String</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/reverse-string/</link>
      <pubDate>Fri, 24 Jul 2020 23:29:06 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/reverse-string/</guid>
      <description>344. Reverse String
python
1 2 3 4 5 6 7  class Solution: def reverseString(self, s: List[str]) -&amp;gt; None: l, r = 0, len(s) - 1 while l &amp;lt; r: s[l], s[r] = s[r], s[l] l += 1; r -= 1 return   </description>
    </item>
    
    <item>
      <title>[LeetCode] 28. Implement strStr()</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/implement-strstr/</link>
      <pubDate>Fri, 24 Jul 2020 23:26:15 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/implement-strstr/</guid>
      <description>28. Implement strStr()
python
1 2 3 4 5 6 7 8  class Solution: def strStr(self, haystack: str, needle: str) -&amp;gt; int: L, n = len(needle), len(haystack) for start in range(n - L + 1): if haystack[start: start + L] == needle: return start return -1   </description>
    </item>
    
    <item>
      <title>[LeetCode] 26. Remove Duplicates from Sorted Array</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/remove-duplicates-from-sorted-array/</link>
      <pubDate>Fri, 24 Jul 2020 22:14:29 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/remove-duplicates-from-sorted-array/</guid>
      <description>26. Remove Duplicates from Sorted Array
python
1 2 3 4 5 6 7 8  class Solution: def removeDuplicates(self, nums: List[int]) -&amp;gt; int: s = 0 for i in range(1, len(nums)): if nums[s] != nums[i]: s += 1 nums[s] = nums[i] return s + 1   </description>
    </item>
    
    <item>
      <title>[LeetCode] 27. Remove Element</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/remove-element/</link>
      <pubDate>Fri, 24 Jul 2020 22:14:29 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/remove-element/</guid>
      <description>27. Remove Element
python
1 2 3 4 5 6 7 8 9 10  class Solution: def removeElement(self, nums: List[int], val: int) -&amp;gt; int: if not len(nums): return 0 count = 0 for i in range(len(nums)): if nums[i] != val: nums[count] = nums[i] count += 1 return count   </description>
    </item>
    
    <item>
      <title>[LeetCode] 16. 3Sum Closest</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/3sum-closest/</link>
      <pubDate>Thu, 23 Jul 2020 14:58:16 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/3sum-closest/</guid>
      <description>16. 3Sum Closest
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Solution: def threeSumClosest(self, nums: List[int], target: int) -&amp;gt; int: nums.sort() d = sys.maxsize res = 0 for i in range(len(nums) - 2): l, r = i + 1, len(nums) - 1 while l &amp;lt; r: s = nums[i] + nums[l] + nums[r] if s == target: return s diff = abs(s - target) if diff &amp;lt; d: d = diff res = s if s &amp;lt; target: l += 1 else: r -= 1 return res   </description>
    </item>
    
    <item>
      <title>[LeetCode] 18. 4Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/4sum/</link>
      <pubDate>Thu, 23 Jul 2020 14:58:16 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/4sum/</guid>
      <description>18. 4Sum
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  class Solution: def fourSum(self, nums: List[int], target: int) -&amp;gt; List[List[int]]: nums.sort() res = [] self.findNSum(nums, target, 4, [], res) return res def findNSum(self, nums, target, N, path, res): if len(nums) &amp;lt; N or N &amp;lt; 2: return # solve 2-sum if N == 2: l, r = 0, len(nums) - 1 while l &amp;lt; r: if nums[l] + nums[r] == target: res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 11. Container With Most Water</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/container-with-most-water/</link>
      <pubDate>Wed, 22 Jul 2020 14:58:16 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/container-with-most-water/</guid>
      <description>11. Container With Most Water
python
1 2 3 4 5 6 7 8 9 10 11 12  class Solution: def maxArea(self, height: List[int]) -&amp;gt; int: if len(height) &amp;lt; 2: return 0 area, l, r = 0, 0, len(height) - 1 while l &amp;lt; r: area = max(area, min(height[l], height[r]) * (r - l)) if height[l] &amp;lt; height[r]: l += 1 else: r -= 1 return area   </description>
    </item>
    
    <item>
      <title>[LeetCode] 15. 3Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/3sum/</link>
      <pubDate>Wed, 22 Jul 2020 14:58:16 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/3sum/</guid>
      <description>15. 3Sum
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class Solution: def threeSum(self, nums: List[int]) -&amp;gt; List[List[int]]: res = [] nums.sort() for i in range(len(nums) - 2): # pass duplicate if i &amp;gt; 0 and nums[i] == nums[i - 1]: continue l, r = i + 1, len(nums) - 1 while l &amp;lt; r: s = nums[i] + nums[l] + nums[r] if s &amp;lt; 0: l += 1 elif s &amp;gt; 0: r -= 1 else: res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 148. Sort List</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/sort-list/</link>
      <pubDate>Tue, 21 Jul 2020 15:44:20 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/sort-list/</guid>
      <description>148. Sort List
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  class Solution: def sortList(self, head: ListNode) -&amp;gt; ListNode: if not head or not head.next: return head slow = fast = head while fast.next and fast.next.next: slow, fast = slow.next, fast.next.next fast = slow slow = slow.</description>
    </item>
    
    <item>
      <title>[LeetCode] 143. Reorder List</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/reorder-list/</link>
      <pubDate>Tue, 21 Jul 2020 15:42:33 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/reorder-list/</guid>
      <description>143. Reorder List
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  class Solution: def reorderList(self, head: ListNode) -&amp;gt; None: if not head: return # find the mid point slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next # reverse the second half in-place pre, node = None, slow while node: pre, node.</description>
    </item>
    
    <item>
      <title>[LeetCode] 25. Reverse Nodes in k-Group</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/reverse-nodes-in-k-group/</link>
      <pubDate>Mon, 20 Jul 2020 12:17:56 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/reverse-nodes-in-k-group/</guid>
      <description>25. Reverse Nodes in k-Group
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Solution: def reverseKGroup(self, head: ListNode, k: int) -&amp;gt; ListNode: count, node = 0, head while node: count += 1 node = node.next if k &amp;lt;= 1 or count &amp;lt; k: return head pre = nxt = None curr = head for _ in range(k): nxt = curr.</description>
    </item>
    
    <item>
      <title>[LeetCode] 23. Merge k Sorted Lists</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/merge-k-sorted-lists/</link>
      <pubDate>Mon, 20 Jul 2020 12:16:33 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/merge-k-sorted-lists/</guid>
      <description>23. Merge k Sorted Lists
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class Solution: def mergeKLists(self, lists: List[ListNode]) -&amp;gt; ListNode: if not lists: return None if len(lists) == 1: return lists[0] mid = len(lists) // 2 l1 = self.mergeKLists(lists[:mid]) l2 = self.mergeKLists(lists[mid:]) return self.merge(l1, l2) def merge(self, l1, l2): cur = dummy = ListNode(0) while l1 and l2: if l1.</description>
    </item>
    
    <item>
      <title>[LeetCode] 142. Linked List Cycle II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/linked-list-cycle-ii/</link>
      <pubDate>Sun, 19 Jul 2020 12:14:46 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/linked-list-cycle-ii/</guid>
      <description>142. Linked List Cycle II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def detectCycle(self, head: ListNode) -&amp;gt; ListNode: if not head: return None fast = slow = head while fast and fast.next: fast = fast.next.next slow = slow.next if fast is slow: fast = head while fast and fast != slow: fast = fast.next slow = slow.next return fast return None   </description>
    </item>
    
  </channel>
</rss>