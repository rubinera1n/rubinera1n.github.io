<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Rubinera1n&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/post/</link>
    <description>Recent content in Posts on Rubinera1n&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 20 Jul 2020 12:17:56 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 25. Reverse Nodes in k-Group</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/reverse-nodes-in-k-group/</link>
      <pubDate>Mon, 20 Jul 2020 12:17:56 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/reverse-nodes-in-k-group/</guid>
      <description>25. Reverse Nodes in k-Group
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Solution: def reverseKGroup(self, head: ListNode, k: int) -&amp;gt; ListNode: count, node = 0, head while node: count += 1 node = node.next if k &amp;lt;= 1 or count &amp;lt; k: return head pre = nxt = None curr = head for _ in range(k): nxt = curr.</description>
    </item>
    
    <item>
      <title>[LeetCode] 23. Merge k Sorted Lists</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/merge-k-sorted-lists/</link>
      <pubDate>Mon, 20 Jul 2020 12:16:33 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/merge-k-sorted-lists/</guid>
      <description>23. Merge k Sorted Lists
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class Solution: def mergeKLists(self, lists: List[ListNode]) -&amp;gt; ListNode: if not lists: return None if len(lists) == 1: return lists[0] mid = len(lists) // 2 l1 = self.mergeKLists(lists[:mid]) l2 = self.mergeKLists(lists[mid:]) return self.merge(l1, l2) def merge(self, l1, l2): cur = dummy = ListNode(0) while l1 and l2: if l1.</description>
    </item>
    
    <item>
      <title>[LeetCode] 142. Linked List Cycle II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/linked-list-cycle-ii/</link>
      <pubDate>Sun, 19 Jul 2020 12:14:46 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/linked-list-cycle-ii/</guid>
      <description>142. Linked List Cycle II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def detectCycle(self, head: ListNode) -&amp;gt; ListNode: if not head: return None fast = slow = head while fast and fast.next: fast = fast.next.next slow = slow.next if fast is slow: fast = head while fast and fast != slow: fast = fast.next slow = slow.next return fast return None   </description>
    </item>
    
    <item>
      <title>[LeetCode] 141. Linked List Cycle</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/linked-list-cycle/</link>
      <pubDate>Sun, 19 Jul 2020 12:13:15 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/linked-list-cycle/</guid>
      <description>141. Linked List Cycle
python
1 2 3 4 5 6 7 8 9 10 11  class Solution: def hasCycle(self, head: ListNode) -&amp;gt; bool: if not head: return False fast = slow = head while fast and fast.next: fast = fast.next.next slow = slow.next if fast is slow: return True return False   </description>
    </item>
    
    <item>
      <title>[LeetCode] 82. Remove Duplicates from Sorted List II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/remove-duplicates-from-sorted-list-ii/</link>
      <pubDate>Sat, 18 Jul 2020 12:09:48 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/remove-duplicates-from-sorted-list-ii/</guid>
      <description>82. Remove Duplicates from Sorted List II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution: def deleteDuplicates(self, head: ListNode) -&amp;gt; ListNode: if not head: return None dummy = pre = ListNode(0) dummy.next = head while head and head.next: if head.val == head.next.val: while head and head.next and head.val == head.next.val: head = head.next # pass number head = head.</description>
    </item>
    
    <item>
      <title>[LeetCode] 83. Remove Duplicates from Sorted List</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/remove-duplicates-from-sorted-list/</link>
      <pubDate>Sat, 18 Jul 2020 12:09:48 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/remove-duplicates-from-sorted-list/</guid>
      <description>83. Remove Duplicates from Sorted List
python
1 2 3 4 5 6 7 8 9 10 11  class Solution: def deleteDuplicates(self, head: ListNode) -&amp;gt; ListNode: if not head: return None cur = head while cur and cur.next: if cur.val == cur.next.val: cur.next = cur.next.next else: cur = cur.next return head   </description>
    </item>
    
    <item>
      <title>[LeetCode] 61. Rotate List</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/rotate-list/</link>
      <pubDate>Fri, 17 Jul 2020 12:02:39 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/rotate-list/</guid>
      <description>61. Rotate List
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Solution: def rotateRight(self, head: ListNode, k: int) -&amp;gt; ListNode: if not head or not head.next or k == 0: return head cur, count = head, 0 while cur: count += 1 cur = cur.next k %= count if k == 0: return head fast = slow = head for _ in range(k): fast = fast.</description>
    </item>
    
    <item>
      <title>[LeetCode] 92. Reverse Linked List II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/reverse-linked-list-ii/</link>
      <pubDate>Fri, 17 Jul 2020 12:02:39 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/reverse-linked-list-ii/</guid>
      <description>92. Reverse Linked List II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class Solution: def reverseBetween(self, head: ListNode, m: int, n: int) -&amp;gt; ListNode: if m == n: return head dummy = ListNode(0) dummy.next = head pre = dummy for i in range(m - 1): pre = pre.next # reverse the [m, n] nodes reverse = nxt = None cur = pre.</description>
    </item>
    
    <item>
      <title>[LeetCode] 24. Swap Nodes in Pairs</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/swap-nodes-in-pairs/</link>
      <pubDate>Thu, 16 Jul 2020 11:59:12 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/swap-nodes-in-pairs/</guid>
      <description>24. Swap Nodes in Pairs
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Solution: def swapPairs(self, head: ListNode) -&amp;gt; ListNode: if not head or not head.next: return head second = head.next pre = ListNode(0) while head and head.next: nxt = head.next head.next = nxt.next nxt.next = head pre.next = nxt head = head.next pre = nxt.</description>
    </item>
    
    <item>
      <title>[LeetCode] 21. Merge Two Sorted Lists</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/merge-two-sorted-lists/</link>
      <pubDate>Thu, 16 Jul 2020 11:56:04 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/merge-two-sorted-lists/</guid>
      <description>21. Merge Two Sorted Lists
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def mergeTwoLists(self, l1: ListNode, l2: ListNode) -&amp;gt; ListNode: tail = dummy = ListNode(0) while l1 and l2: if l1.val &amp;lt; l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next tail.next = l1 or l2 return dummy.next   </description>
    </item>
    
    <item>
      <title>[LeetCode] 19. Remove Nth Node From End of List</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/remove-nth-node-from-end-of-list/</link>
      <pubDate>Wed, 15 Jul 2020 11:54:22 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/remove-nth-node-from-end-of-list/</guid>
      <description>19. Remove Nth Node From End of List
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -&amp;gt; ListNode: if not head: return None dummy = ListNode(0) dummy.next = head slow = fast = dummy for _ in range(n): fast = fast.next while fast and fast.next: fast = fast.next slow = slow.next slow.next = slow.</description>
    </item>
    
    <item>
      <title>[LeetCode] 2. Add Two Numbers</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/add-two-numbers/</link>
      <pubDate>Wed, 15 Jul 2020 11:52:46 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/linked_list/add-two-numbers/</guid>
      <description>2. Add Two Numbers
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&amp;gt; ListNode: tail = dummy = ListNode(0) carry = 0 while l1 or l2 or carry: if l1: carry += l1.val l1 = l1.next if l2: carry += l2.val l2 = l2.next tail.next = ListNode(carry % 10) carry //= 10 tail = tail.</description>
    </item>
    
    <item>
      <title>[LeetCode] 216. Combination Sum III</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/combination-sum-iii/</link>
      <pubDate>Tue, 14 Jul 2020 11:49:43 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/combination-sum-iii/</guid>
      <description>216. Combination Sum III
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution: def combinationSum3(self, k: int, n: int) -&amp;gt; List[List[int]]: res = [] self.dfs(range(1, 10), k, n, 0, [], res) return res def dfs(self, nums, k, n, index, path, res): if k &amp;lt; 0 or n &amp;lt; 0: return if k == 0 and n == 0: res.append(path) return for i in range(index, len(nums)): self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 189. Rotate Array</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/rotate-array/</link>
      <pubDate>Tue, 14 Jul 2020 11:43:16 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/rotate-array/</guid>
      <description>189. Rotate Array
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def rotate(self, nums: List[int], k: int) -&amp;gt; None: &amp;#34;&amp;#34;&amp;#34; Do not return anything, modify nums in-place instead. &amp;#34;&amp;#34;&amp;#34; k = k % len(nums) self.reverse(nums, 0, len(nums) - k - 1) self.reverse(nums, len(nums) - k, len(nums) - 1) self.reverse(nums, 0, len(nums) - 1) def reverse(self, nums, s, e): while s &amp;lt; e: nums[s], nums[e] = nums[e], nums[s] s += 1 e -= 1   </description>
    </item>
    
    <item>
      <title>[LeetCode] 448. Find All Numbers Disappeared in an Array</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/find-all-numbers-disappeared-in-an-array/</link>
      <pubDate>Mon, 13 Jul 2020 22:49:12 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/find-all-numbers-disappeared-in-an-array/</guid>
      <description>448. Find All Numbers Disappeared in an Array
python
1 2 3 4 5  class Solution: def findDisappearedNumbers(self, nums: List[int]) -&amp;gt; List[int]: a = set([i for i in range(1, len(nums) + 1)]) b = set(nums) return list(a - b)   </description>
    </item>
    
    <item>
      <title>[LeetCode] 442. Find All Duplicates in an Array</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/find-all-duplicates-in-an-array/</link>
      <pubDate>Mon, 13 Jul 2020 22:47:33 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/find-all-duplicates-in-an-array/</guid>
      <description>442. Find All Duplicates in an Array
python
1 2 3  class Solution: def findDuplicates(self, nums: List[int]) -&amp;gt; List[int]: return [key for key, value in collections.Counter(nums).items() if value == 2]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 34. Find First and Last Position of Element in Sorted Array</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/find-first-and-last-position-of-element-in-sorted-array/</link>
      <pubDate>Sun, 12 Jul 2020 22:53:05 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/find-first-and-last-position-of-element-in-sorted-array/</guid>
      <description>34. Find First and Last Position of Element in Sorted Array
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  class Solution: def searchRange(self, nums: List[int], target: int) -&amp;gt; List[int]: if not nums: return [-1, -1] l, r = 0, len(nums) while l &amp;lt; r: mid = l + (r - l) // 2 if nums[mid] &amp;gt;= target: r = mid else: l = mid + 1 # tmp  start = l l, r = 0, len(nums) while l &amp;lt; r: mid = l + (r - l) // 2 if nums[mid] &amp;gt; target: r = mid else: l = mid + 1 end = l return [-1, -1] if start == end else [start, end - 1]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 33. Search in Rotated Sorted Array</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/search-in-rotated-sorted-array/</link>
      <pubDate>Sun, 12 Jul 2020 22:33:12 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/search-in-rotated-sorted-array/</guid>
      <description>33. Search in Rotated Sorted Array
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Solution: def search(self, nums: List[int], target: int) -&amp;gt; int: l, r = 0, len(nums) - 1 while l &amp;lt;= r: mid = l + (r - l) // 2 if nums[mid] == target: return mid elif nums[l] &amp;lt;= nums[mid]: if nums[l] &amp;lt;= target &amp;lt; nums[mid]: r = mid - 1 else: l = mid + 1 elif nums[mid] &amp;lt;= nums[r]: if nums[mid] &amp;lt; target &amp;lt;= nums[r]: l = mid + 1 else: r = mid - 1 return -1   </description>
    </item>
    
    <item>
      <title>[LeetCode] 40. Combination Sum II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/combination-sum-ii/</link>
      <pubDate>Sat, 11 Jul 2020 22:14:56 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/combination-sum-ii/</guid>
      <description>40. Combination Sum II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution: def combinationSum2(self, candidates: List[int], target: int) -&amp;gt; List[List[int]]: res = [] candidates.sort() self.dfs(candidates, target, 0, [], res) return res def dfs(self, lst, target, index, path, res): if target &amp;lt; 0: return if target == 0: res.append(path) return res for i in range(index, len(lst)): if i &amp;gt; index and lst[i] == lst[i-1]: continue self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 39. Combination Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/combination-sum/</link>
      <pubDate>Sat, 11 Jul 2020 22:13:05 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/combination-sum/</guid>
      <description>39. Combination Sum
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def combinationSum(self, candidates: List[int], target: int) -&amp;gt; List[List[int]]: res = [] candidates.sort() self.dfs(candidates, target, 0, [], res) return res def dfs(self, nums, target, idx, path, res): if target &amp;lt; 0: return if target == 0: res.append(path) return for i in range(idx, len(nums)): self.dfs(nums, target - nums[i], i, path + [nums[i]], res)   </description>
    </item>
    
  </channel>
</rss>