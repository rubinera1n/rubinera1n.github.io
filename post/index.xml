<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Rubinera1n&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/post/</link>
    <description>Recent content in Posts on Rubinera1n&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 07 Jul 2020 14:37:34 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 110. Balanced Binary Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/balanced-binary-tree/</link>
      <pubDate>Tue, 07 Jul 2020 14:37:34 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/balanced-binary-tree/</guid>
      <description>110. Balanced Binary Tree
python
1 2 3 4 5 6 7 8 9 10  class Solution: def isBalanced(self, root: TreeNode) -&amp;gt; bool: return self.helper(root)[1] def helper(self, root): if not root: return (0, True) l_depth, l_balanced = self.helper(root.left) r_depth, r_balanced = self.helper(root.right) return max(l_depth, r_depth) + 1, l_balanced and r_balanced and abs(l_depth - r_depth) &amp;lt;= 1   go
   </description>
    </item>
    
    <item>
      <title>[LeetCode] 98. Validate Binary Search Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/validate-binary-search-tree/</link>
      <pubDate>Tue, 07 Jul 2020 14:31:46 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/validate-binary-search-tree/</guid>
      <description>98. Validate Binary Search Tree
python
1 2 3 4 5 6 7 8 9 10  class Solution: def isValidBST(self, root: TreeNode) -&amp;gt; bool: return self.helper(root, float(&amp;#39;-inf&amp;#39;), float(&amp;#39;inf&amp;#39;)) def helper(self, root, lower, upper): if not root: return True return root.val &amp;gt; lower and root.val &amp;lt; upper \ and self.helper(root.left, lower, root.val) \ and self.helper(root.right, root.val, upper)   go
   </description>
    </item>
    
    <item>
      <title>[LeetCode] 108. Convert Sorted Array to Binary Search Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/convert-sorted-array-to-binary-search-tree/</link>
      <pubDate>Mon, 06 Jul 2020 11:58:22 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/convert-sorted-array-to-binary-search-tree/</guid>
      <description>108. Convert Sorted Array to Binary Search Tree
python
1 2 3 4 5 6 7 8 9 10  class Solution: def sortedArrayToBST(self, nums: List[int]) -&amp;gt; TreeNode: l, r = 0, len(nums) - 1 if l &amp;lt;= r: m = l + (r - l) // 2 root = TreeNode(nums[m]) root.left = self.sortedArrayToBST(nums[:m]) root.right = self.sortedArrayToBST(nums[m+1:]) return root   go
   </description>
    </item>
    
    <item>
      <title>[LeetCode] 103. Binary Tree Zigzag Level Order Traversal</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/binary-tree-zigzag-level-order-traversal/</link>
      <pubDate>Mon, 06 Jul 2020 11:50:03 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/binary-tree-zigzag-level-order-traversal/</guid>
      <description>103. Binary Tree Zigzag Level Order Traversal
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  class Solution: def zigzagLevelOrder(self, root: TreeNode) -&amp;gt; List[List[int]]: res = [] self.dfs(root, 0, res) return res def dfs(self, root, level, res): if not root: return if len(res) &amp;lt;= level: res.</description>
    </item>
    
    <item>
      <title>Head First Goroutine</title>
      <link>https://blog.xiufuguo.com/post/golang/head_first_goroutine/</link>
      <pubDate>Mon, 06 Jul 2020 04:07:47 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/golang/head_first_goroutine/</guid>
      <description>深入浅出 Go 协程 一、什么是 Goroutines Goroutines 是用户空间线程。 从概念上讲，它类似于由 OS 管理的内核线程，但完全由 Go 运行时管理。 比内核线程更轻巧，更便宜。 调度程序</description>
    </item>
    
    <item>
      <title>[LeetCode] 106. Construct Binary Tree from Inorder and Postorder Traversal</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/construct-binary-tree-from-inorder-and-postorder-traversal/</link>
      <pubDate>Sun, 05 Jul 2020 15:18:39 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/construct-binary-tree-from-inorder-and-postorder-traversal/</guid>
      <description>106. Construct Binary Tree from Inorder and Postorder Traversal
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution: def buildTree(self, inorder: List[int], postorder: List[int]) -&amp;gt; TreeNode: if not inorder or not postorder: return None return self.helper(inorder, 0, len(inorder) - 1, postorder, 0, len(postorder) - 1) def helper(self, inorder, i_left, i_right, postorder, p_left, p_right): if i_left &amp;gt; i_right: return None if i_left == i_right: return TreeNode(postorder[p_right]) idx = inorder.</description>
    </item>
    
    <item>
      <title>[LeetCode] 105. Construct Binary Tree from Preorder and Inorder Traversal</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/construct-binary-tree-from-preorder-and-inorder-traversal/</link>
      <pubDate>Sun, 05 Jul 2020 15:16:20 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/construct-binary-tree-from-preorder-and-inorder-traversal/</guid>
      <description>105. Construct Binary Tree from Preorder and Inorder Traversal
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution: def buildTree(self, preorder: List[int], inorder: List[int]) -&amp;gt; TreeNode: if not preorder or not inorder: return None return self.helper(preorder, 0, len(preorder) - 1, inorder, 0, len(inorder) - 1) def helper(self, preorder, p_left, p_right, inorder, i_left, i_right): if p_left &amp;gt; p_right: return None if p_left == p_right: return TreeNode(preorder[p_left]) idx = inorder.</description>
    </item>
    
    <item>
      <title>[LeetCode] 104. Maximum Depth of Binary Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/maximum-depth-of-binary-tree/</link>
      <pubDate>Sat, 04 Jul 2020 01:03:39 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/maximum-depth-of-binary-tree/</guid>
      <description>104. Maximum Depth of Binary Tree
python
1 2 3 4 5  class Solution: def maxDepth(self, root: TreeNode) -&amp;gt; int: if not root: return 0 return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1   go
   </description>
    </item>
    
    <item>
      <title>[LeetCode] 107. Binary Tree Level Order Traversal II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/binary-tree-level-order-traversal-ii/</link>
      <pubDate>Sat, 04 Jul 2020 01:01:23 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/binary-tree-level-order-traversal-ii/</guid>
      <description>107. Binary Tree Level Order Traversal II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  class Solution: &amp;#34;&amp;#34;&amp;#34; def levelOrderBottom(self, root: TreeNode) -&amp;gt; List[List[int]]: # BFS + Queue queue, res = collections.deque([(root, 0)]), [] while queue: node, level = queue.popleft() if node: if len(res) &amp;lt; level + 1: res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 96. Unique Binary Search Trees</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/unique-binary-search-trees/</link>
      <pubDate>Fri, 03 Jul 2020 00:58:28 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/unique-binary-search-trees/</guid>
      <description>96. Unique Binary Search Trees
python
1 2 3 4 5 6 7 8  class Solution: def numTrees(self, n: int) -&amp;gt; int: res = [0] * (n + 1) res[0] = 1 for i in range(1, n + 1): for j in range(i): res[i] += res[j] * res[i-1-j] return res[n]   go
   </description>
    </item>
    
    <item>
      <title>[LeetCode] 95. Unique Binary Search Trees II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/unique-binary-search-trees-ii/</link>
      <pubDate>Fri, 03 Jul 2020 00:56:02 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/unique-binary-search-trees-ii/</guid>
      <description>95. Unique Binary Search Trees II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def generateTrees(self, n: int) -&amp;gt; List[TreeNode]: def generate(l, r): # split between [l, r) if l == r: return [None] nodes = [] for i in range(l, r): for lchild in generate(l, i): for rchild in generate(i+1, r): node = TreeNode(i+1) # +1 to convert the index to the actual value node.</description>
    </item>
    
    <item>
      <title>[LeetCode] 102. Binary Tree Level Order Traversal</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/binary-tree-level-order-traversal/</link>
      <pubDate>Thu, 02 Jul 2020 00:52:52 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/binary-tree-level-order-traversal/</guid>
      <description>102. Binary Tree Level Order Traversal
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  class Solution: &amp;#34;&amp;#34;&amp;#34; # DFS def levelOrder(self, root: TreeNode) -&amp;gt; List[List[int]]: res = [] self.dfs(root, 0, res) return res def dfs(self, root, level, res): if not root: return if len(res) &amp;lt;= level: res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 94. Binary Tree Inorder Traversal</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/binary-tree-inorder-traversal/</link>
      <pubDate>Thu, 02 Jul 2020 00:50:40 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/binary-tree-inorder-traversal/</guid>
      <description>94. Binary Tree Inorder Traversal
python
1 2 3 4 5 6 7 8 9 10 11 12 13  class Solution: def inorderTraversal(self, root: TreeNode) -&amp;gt; List[int]: res = [] self.helper(root, res) return res def helper(self, root, res): if not root: return self.helper(root.left, res) res.append(root.val) self.helper(root.right, res)   go
1 2 3 4 5 6 7 8 9 10 11 12 13 14  func inorderTraversal(root *TreeNode) []int { res := []int{} dfs(root, &amp;amp;res) return res } func dfs(node *TreeNode, res *[]int) { if node == nil { return } dfs(node.</description>
    </item>
    
    <item>
      <title>[LeetCode] 101. Symmetric Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/symmetric-tree/</link>
      <pubDate>Wed, 01 Jul 2020 00:47:21 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/symmetric-tree/</guid>
      <description>101. Symmetric Tree
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def isSymmetric(self, root: TreeNode) -&amp;gt; bool: if not root: return True return self.helper(root.left, root.right) def helper(self, left, right): if not left and not right: return True if not left or not right: return False if left.val != right.val: return False return self.helper(left.left, right.right) and self.helper(left.right, right.left)   go</description>
    </item>
    
    <item>
      <title>[LeetCode] 100. Same Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/tree/same-tree/</link>
      <pubDate>Wed, 01 Jul 2020 00:32:28 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/tree/same-tree/</guid>
      <description>100. Same Tree
python
1 2 3 4 5 6 7 8  class Solution: def isSameTree(self, p: TreeNode, q: TreeNode) -&amp;gt; bool: if not p and not q: return True if not p or not q: return False return p.val == q.val and self.isSameTree(p.left, q.left) and \ self.isSameTree(p.right, q.right)   go
1 2 3 4 5 6 7 8 9  func isSameTree(p *TreeNode, q *TreeNode) bool { if p == nil &amp;amp;&amp;amp; q == nil { return true } if p == nil || q == nil { return false } return p.</description>
    </item>
    
    <item>
      <title>MOOC</title>
      <link>https://blog.xiufuguo.com/post/life/mooc/</link>
      <pubDate>Sun, 31 May 2020 15:36:12 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/life/mooc/</guid>
      <description>最近发现 Coursera 六月课程要开始了，以前念书时就知道 MOOC，工作求职开始用 Linkedin，突然发现证书可以发布到 Linkedin，这样可以增加面</description>
    </item>
    
    <item>
      <title>Set Goal</title>
      <link>https://blog.xiufuguo.com/post/life/set_goal/</link>
      <pubDate>Mon, 25 May 2020 06:40:00 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/life/set_goal/</guid>
      <description>2020年上半年快结束了，突然想写 Blog 记录下自己的生活与技术学习， 自己习惯用Scrivener做笔记，真的没有习惯写博客，写一些生活记录比较容</description>
    </item>
    
    <item>
      <title>Reverse Linked List</title>
      <link>https://blog.xiufuguo.com/post/leetcode/template/reverse_linked_list/</link>
      <pubDate>Tue, 19 May 2020 01:53:36 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/template/reverse_linked_list/</guid>
      <description>code
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  class ListNode: def __init__(self, x): self.value = x self.next = None def reverse_link(head): if not head: return pre, nxt, curr = None, None, head while curr: nxt = curr.next curr.next = pre pre = curr curr = nxt return pre def create_link(nums): dummy = ListNode(0) curr = dummy for i in nums: curr.</description>
    </item>
    
    <item>
      <title>HashMap</title>
      <link>https://blog.xiufuguo.com/post/leetcode/template/hash_table/</link>
      <pubDate>Tue, 19 May 2020 01:48:20 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/template/hash_table/</guid>
      <description>code
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68  class ListNode: def __init__(self, key, value): self.</description>
    </item>
    
    <item>
      <title>Tree Traversal</title>
      <link>https://blog.xiufuguo.com/post/leetcode/template/tree_traversal/</link>
      <pubDate>Tue, 19 May 2020 01:20:06 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/template/tree_traversal/</guid>
      <description>preorder inorder postorder  code
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  class TreeNode(object): def __init__(self, x): self.val = x self.left = None self.right = None def make_tree(lst): node = None if not lst: return if lst[0] is not None: node = TreeNode(lst.</description>
    </item>
    
  </channel>
</rss>