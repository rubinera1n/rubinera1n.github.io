<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on XiuFu Guo&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/post/</link>
    <description>Recent content in Posts on XiuFu Guo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Aug 2020 13:29:27 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 46. Permutations</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/permutations/</link>
      <pubDate>Mon, 03 Aug 2020 13:29:27 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/permutations/</guid>
      <description>46. Permutations
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  class Solution: def permute(self, nums: List[int]) -&amp;gt; List[List[int]]: if not nums: return [] res, used = [], [False] * len(nums) self.dfs(nums, [], res, used) return res def dfs(self, nums, path, res, used): if len(path) == len(nums): res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 17. Letter Combinations of a Phone Number</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/letter-combinations-of-a-phone-number/</link>
      <pubDate>Mon, 03 Aug 2020 13:28:05 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/letter-combinations-of-a-phone-number/</guid>
      <description>17. Letter Combinations of a Phone Number
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution: def letterCombinations(self, digits: str) -&amp;gt; List[str]: if not digits: return [] dct = {&amp;#39;2&amp;#39;: &amp;#39;abc&amp;#39;, &amp;#39;3&amp;#39;: &amp;#39;def&amp;#39;, &amp;#39;4&amp;#39;: &amp;#39;ghi&amp;#39;, &amp;#39;5&amp;#39;: &amp;#39;jkl&amp;#39;, &amp;#39;6&amp;#39;: &amp;#39;mno&amp;#39;, &amp;#39;7&amp;#39;: &amp;#39;pqrs&amp;#39;, &amp;#39;8&amp;#39;: &amp;#39;tuv&amp;#39;, &amp;#39;9&amp;#39;: &amp;#39;wxyz&amp;#39;} res = [] self.dfs(digits, dct, 0, &amp;#39;&amp;#39;, res) return res def dfs(self, digits, dct, index, path, res): if len(path) == len(digits): res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 179. Largest Number</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/sort/largest-number/</link>
      <pubDate>Sun, 02 Aug 2020 23:58:18 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/sort/largest-number/</guid>
      <description>179. Largest Number
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class Solution: def largestNumber(self, nums: List[int]) -&amp;gt; str: # use quick sort, in-place self.quickSort(nums, 0, len(nums) - 1) return str(int(&amp;#34;&amp;#34;.join(map(str, nums)))) def quickSort(self, nums, l, r): if l &amp;gt;= r: return pos = self.partition(nums, l, r) self.quickSort(nums, l, pos - 1) self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 56. Merge Intervals</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/sort/merge-intervals/</link>
      <pubDate>Sun, 02 Aug 2020 23:56:54 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/sort/merge-intervals/</guid>
      <description>56. Merge Intervals python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution: def merge(self, intervals: List[List[int]]) -&amp;gt; List[List[int]]: if not intervals: return [] # sort intervals.sort() res = [] for interval in intervals: # 空 or 迭代的数组起点 &amp;gt; 答案最后一个数组尾巴，就进行插入</description>
    </item>
    
    <item>
      <title>[LeetCode] 1038. Binary Search Tree to Greater Sum Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/bst/binary-search-tree-to-greater-sum-tree/</link>
      <pubDate>Sat, 01 Aug 2020 23:07:01 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/bst/binary-search-tree-to-greater-sum-tree/</guid>
      <description>1038. Binary Search Tree to Greater Sum Tree
python
1 2 3 4 5 6 7 8 9 10 11 12 13  class Solution: def bstToGst(self, root: TreeNode) -&amp;gt; TreeNode: self.sum = 0 self.helper(root) return root def helper(self, node): if not node: return self.helper(node.right) node.val += self.sum self.sum = node.val self.helper(node.left)   </description>
    </item>
    
    <item>
      <title>[LeetCode] 109. Convert Sorted List to Binary Search Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/bst/convert-sorted-list-to-binary-search-tree/</link>
      <pubDate>Sat, 01 Aug 2020 23:07:01 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/bst/convert-sorted-list-to-binary-search-tree/</guid>
      <description>109. Convert Sorted List to Binary Search Tree
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Solution: def sortedListToBST(self, head: ListNode) -&amp;gt; TreeNode: lst = [] while head: lst.append(head.val) head = head.next return self.helper(lst, 0, len(lst) - 1) def helper(self, lst, start, end): if start &amp;gt; end: return None if start == end: return TreeNode(lst[start]) mid = (start + end) &amp;gt;&amp;gt; 1 root = TreeNode(lst[mid]) root.</description>
    </item>
    
    <item>
      <title>[LeetCode] 235. Lowest Common Ancestor of a Binary Search Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/bst/lowest-common-ancestor-of-a-binary-search-tree/</link>
      <pubDate>Fri, 31 Jul 2020 22:58:39 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/bst/lowest-common-ancestor-of-a-binary-search-tree/</guid>
      <description>235. Lowest Common Ancestor of a Binary Search Tree
python
1 2 3 4 5 6 7 8 9 10  class Solution: def lowestCommonAncestor(self, root: &amp;#39;TreeNode&amp;#39;, p: &amp;#39;TreeNode&amp;#39;, q: &amp;#39;TreeNode&amp;#39;) -&amp;gt; &amp;#39;TreeNode&amp;#39;: if not root: return None if (root.val - p.val) * (root.val - q.val) &amp;lt;= 0: return root elif root.val &amp;gt; p.val and root.val &amp;gt; q.val: return self.lowestCommonAncestor(root.left, p, q) else: return self.lowestCommonAncestor(root.right, p, q)   </description>
    </item>
    
    <item>
      <title>[LeetCode] 240. Search a 2D Matrix II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/binary_search/search-a-2d-matrix-ii/</link>
      <pubDate>Fri, 31 Jul 2020 22:58:39 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/binary_search/search-a-2d-matrix-ii/</guid>
      <description>240. Search a 2D Matrix II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution: def searchMatrix(self, matrix, target): if not matrix or not target: return False rows, cols = len(matrix), len(matrix[0]) row, col = rows - 1, 0 while row &amp;gt;= 0 and col &amp;lt;= cols - 1: if matrix[row][col] == target: return True elif matrix[row][col] &amp;gt; target: row -= 1 else: col += 1 return False   </description>
    </item>
    
    <item>
      <title>[LeetCode] 212. Word Search II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/word-search-ii/</link>
      <pubDate>Thu, 30 Jul 2020 22:55:38 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/word-search-ii/</guid>
      <description>212. Word Search II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  class TrieNode(): def __init__(self): self.children = collections.defaultdict(TrieNode) self.isWord = False class Trie(): def __init__(self): self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 79. Word Search</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/word-search/</link>
      <pubDate>Thu, 30 Jul 2020 22:53:46 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/word-search/</guid>
      <description>79. Word Search
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Solution: def exist(self, board: List[List[str]], word: str) -&amp;gt; bool: if not board: return False for i in range(len(board)): for j in range(len(board[0])): if self.dfs(board, i, j, word): return True return False def dfs(self, board, i, j, word): if len(word) == 0: return True if i &amp;lt; 0 or i &amp;gt;= len(board) or j &amp;lt; 0 or j &amp;gt;= len(board[0]) or word[0] !</description>
    </item>
    
    <item>
      <title>[LeetCode] 74. Search a 2D Matrix</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/binary_search/search-a-2d-matrix/</link>
      <pubDate>Wed, 29 Jul 2020 00:36:37 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/binary_search/search-a-2d-matrix/</guid>
      <description>74. Search a 2D Matrix
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  class Solution: def searchMatrix(self, matrix: List[List[int]], target: int) -&amp;gt; bool: if not matrix or target is None: return False row, col = len(matrix), len(matrix[0]) low, high = 0, row * col - 1 while low &amp;lt;= high: mid = low + (high - low) // 2 num = matrix[mid // col][mid % col] if num == target: return True elif num &amp;lt; target: low = mid + 1 else: high = mid - 1 return False   </description>
    </item>
    
    <item>
      <title>[LeetCode] 35. Search Insert Position</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/binary_search/search-insert-position/</link>
      <pubDate>Wed, 29 Jul 2020 00:30:42 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/binary_search/search-insert-position/</guid>
      <description>35. Search Insert Position
python
1 2 3 4 5 6 7 8 9 10  class Solution: def searchInsert(self, nums: List[int], target: int) -&amp;gt; int: l, r = 0, len(nums) while l &amp;lt; r: mid = l + (r - l) // 2 if nums[mid] &amp;lt; target: l = mid + 1 else: r = mid return l   </description>
    </item>
    
    <item>
      <title>Science Internet</title>
      <link>https://blog.xiufuguo.com/post/technology/science_internet/</link>
      <pubDate>Tue, 28 Jul 2020 14:01:03 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/technology/science_internet/</guid>
      <description>1. 配置前的准备 域名 VPS (虚拟专用服务器) 1.1 如何申请域名？ 免费：google search apply free domain name 我自己使用阿里付费域名，后面的 HTTPS 也方便，可配置自己博客域名</description>
    </item>
    
    <item>
      <title>[LeetCode] 349. Intersection of Two Arrays</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/intersection-of-two-arrays/</link>
      <pubDate>Tue, 28 Jul 2020 00:28:18 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/intersection-of-two-arrays/</guid>
      <description>349. Intersection of Two Arrays
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Solution: def intersection(self, nums1: List[int], nums2: List[int]) -&amp;gt; List[int]: res = [] nums1.sort() nums2.sort() i = j = 0 while (i &amp;lt; len(nums1) and j &amp;lt; len(nums2)): if nums1[i] &amp;gt; nums2[j]: j += 1 elif nums1[i] &amp;lt; nums2[j]: i += 1 else: if not (len(res) and nums1[i] == res[len(res)-1]): res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 42. Trapping Rain Water</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/trapping-rain-water/</link>
      <pubDate>Tue, 28 Jul 2020 00:26:00 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/trapping-rain-water/</guid>
      <description>42. Trapping Rain Water
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  class Solution: def trap(self, height: List[int]) -&amp;gt; int: if not height or len(height) &amp;lt; 3: return 0 res = 0 left, right = 0, len(height) - 1 l_max, r_max = height[left], height[right] while left &amp;lt; right: l_max, r_max = max(height[left], l_max), max(height[right], r_max) if l_max &amp;lt;= r_max: res += l_max - height[left] left += 1 else: res += r_max - height[right] right -= 1 return res   </description>
    </item>
    
    <item>
      <title>[LeetCode] 287. Find the Duplicate Number</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/find-the-duplicate-number/</link>
      <pubDate>Mon, 27 Jul 2020 16:11:18 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/find-the-duplicate-number/</guid>
      <description>287. Find the Duplicate Number
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def findDuplicate(self, nums: List[int]) -&amp;gt; int: slow = fast = tail = 0 while True: slow = nums[slow] fast = nums[nums[fast]] if slow == fast: break while True: slow = nums[slow] tail = nums[tail] if slow == tail: break return slow   </description>
    </item>
    
    <item>
      <title>[LeetCode] 234. Palindrome Linked List</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/list/palindrome-linked-list/</link>
      <pubDate>Mon, 27 Jul 2020 16:09:00 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/list/palindrome-linked-list/</guid>
      <description>234. Palindrome Linked List
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  class Solution: def isPalindrome(self, head: ListNode) -&amp;gt; bool: if not head: return True fast = slow = head while fast.next and fast.next.next: fast = fast.next.next slow = slow.next p = head q = self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 209. Minimum Size Subarray Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/sliding_window/minimum-size-subarray-sum/</link>
      <pubDate>Sun, 26 Jul 2020 22:23:58 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/sliding_window/minimum-size-subarray-sum/</guid>
      <description>209. Minimum Size Subarray Sum
python
1 2 3 4 5 6 7 8 9 10 11 12  class Solution: def minSubArrayLen(self, s: int, nums: List[int]) -&amp;gt; int: total = left = right = 0 res = len(nums) + 1 while right &amp;lt; len(nums): total += nums[right] while total &amp;gt;= s: res = min(res, right - left + 1) total -= nums[left] left += 1 right += 1 return res if res &amp;lt;= len(nums) else 0   </description>
    </item>
    
    <item>
      <title>[LeetCode] 167. Two Sum II - Input array is sorted</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/two-sum-ii-input-array-is-sorted/</link>
      <pubDate>Sun, 26 Jul 2020 22:22:34 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/two-sum-ii-input-array-is-sorted/</guid>
      <description>167. Two Sum II - Input array is sorted
python
1 2 3 4 5 6 7 8 9 10  class Solution: def twoSum(self, numbers: List[int], target: int) -&amp;gt; List[int]: l, r = 0, len(numbers) - 1 while l &amp;lt; r: if numbers[l] + numbers[r] == target: return [l + 1, r + 1] elif numbers[l] + numbers[r] &amp;gt; target: r -= 1 else: l += 1   </description>
    </item>
    
    <item>
      <title>[LeetCode] 75. Sort Colors</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/sort-colors/</link>
      <pubDate>Sat, 25 Jul 2020 22:18:54 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/sort-colors/</guid>
      <description>75. Sort Colors
python
1 2 3 4 5 6 7 8 9 10 11 12  class Solution: def sortColors(self, nums: List[int]) -&amp;gt; None: l, r, zero = 0, len(nums) - 1, 0 while l &amp;lt;= r: if nums[l] == 0: nums[l], nums[zero] = nums[zero], nums[l] l += 1; zero += 1 elif nums[l] == 2: nums[l], nums[r] = nums[r], nums[l] r -= 1 else: l += 1   </description>
    </item>
    
  </channel>
</rss>