<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on XiuFu Guo&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/post/</link>
    <description>Recent content in Posts on XiuFu Guo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 Aug 2020 17:35:29 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 300. Longest Increasing Subsequence</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/longest-increasing-subsequence/</link>
      <pubDate>Sun, 09 Aug 2020 17:35:29 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/longest-increasing-subsequence/</guid>
      <description>300. Longest Increasing Subsequence python 1 2 3 4 5 6 7 8 9 10 11 12 # Time: O(n^2), Space: O(n) class Solution: def lengthOfLIS(self, nums: List[int]) -&amp;gt; int: if not nums: return 0 dp = [1] * len(nums) for i in range(len(nums)): for j in range(i): # 如果要求非严格递增，将此行 &amp;#39;&amp;lt;&amp;#39; 改为 &amp;#39;&amp;lt;=&amp;#39; 即可。 if</description>
    </item>
    
    <item>
      <title>[LeetCode] 279. Perfect Squares</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/perfect-squares/</link>
      <pubDate>Sun, 09 Aug 2020 17:33:23 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/perfect-squares/</guid>
      <description>279. Perfect Squares
python
1 2 3 4 5 6 7 8  # Time: O(n * n ^ 0.5), Space: O(n) class Solution: def numSquares(self, n: int) -&amp;gt; int: dp = [i for i in range(n + 1)] for i in range(2, n + 1): for j in range(1, int(i ** 0.5) + 1): dp[i] = min(dp[i], dp[i - j * j] + 1) return dp[-1]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 198. House Robber</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/house-robber/</link>
      <pubDate>Sat, 08 Aug 2020 01:21:27 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/house-robber/</guid>
      <description>198. House Robber
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # Time: O(n), Space: O(1) class Solution: def rob(self, nums: List[int]) -&amp;gt; int: if not nums: return 0 size = len(nums) if size == 1: return nums[0] first, second = nums[0], max(nums[0], nums[1]) for i in range(2, size): first, second = second, max(first + nums[i], second) return second   </description>
    </item>
    
    <item>
      <title>[LeetCode] 213. House Robber II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/house-robber-ii/</link>
      <pubDate>Sat, 08 Aug 2020 01:21:27 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/house-robber-ii/</guid>
      <description>213. House Robber II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  # Time: O(n), Space: O(1) class Solution: def rob(self, nums: List[int]) -&amp;gt; int: if not nums: return 0 if len(nums) == 1: return nums[0] return max(self.helper(nums[:-1]), self.helper(nums[1:])) def helper(self, nums): if not nums: return 0 if len(nums) == 1: return nums[0] a, b = nums[0], max(nums[:2]) for i in range(2, len(nums)): a, b = b, max(b, a + nums[i]) return b   </description>
    </item>
    
    <item>
      <title>[LeetCode] 120. Triangle</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/triangle/</link>
      <pubDate>Fri, 07 Aug 2020 01:15:48 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/triangle/</guid>
      <description>120. Triangle
python
1 2 3 4 5 6 7 8 9  class Solution: def minimumTotal(self, triangle: List[List[int]]) -&amp;gt; int: if not triangle: return 0 res = triangle[-1] for i in range(len(triangle) - 2, -1, -1): for j in range(len(triangle[i])): res[j] = min(res[j], res[j+1]) + triangle[i][j] return res[0]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 121. Best Time to Buy and Sell Stock</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/best-time-to-buy-and-sell-stock/</link>
      <pubDate>Fri, 07 Aug 2020 01:15:48 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/best-time-to-buy-and-sell-stock/</guid>
      <description>121. Best Time to Buy and Sell Stock
python
1 2 3 4 5 6 7 8 9  class Solution: def maxProfit(self, prices: List[int]) -&amp;gt; int: if not prices: return 0 minPri, maxPro = prices[0], 0 for i in range(1, len(prices)): minPri = min(minPri, prices[i]) maxPro = max(maxPro, prices[i] - minPri) return maxPro   </description>
    </item>
    
    <item>
      <title>[LeetCode] 62. Unique Paths</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-paths/</link>
      <pubDate>Thu, 06 Aug 2020 01:11:28 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-paths/</guid>
      <description>62. Unique Paths
python
1 2 3 4 5 6 7 8 9  class Solution: def uniquePaths(self, m: int, n: int) -&amp;gt; int: if not m or not n: return 0 dp = [[1 for _ in range(m)] for _ in range(n)] for row in range(1, n): for col in range(1, m): dp[row][col] = dp[row - 1][col] + dp[row][col - 1] return dp[-1][-1]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 64. Minimum Path Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/minimum-path-sum/</link>
      <pubDate>Thu, 06 Aug 2020 01:11:28 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/minimum-path-sum/</guid>
      <description>64. Minimum Path Sum
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def minPathSum(self, grid: List[List[int]]) -&amp;gt; int: if not grid: return 0 row, col = len(grid), len(grid[0]) dp = [[0 for _ in range(col)] for _ in range(row)] dp[0][0] = grid[0][0] for i in range(1, row): dp[i][0] = dp[i-1][0] + grid[i][0] for i in range(1, col): dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, row): for j in range(1, col): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 53. Maximum Subarray</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/maximum-subarray/</link>
      <pubDate>Wed, 05 Aug 2020 01:08:33 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/maximum-subarray/</guid>
      <description>53. Maximum Subarray
python
1 2 3 4 5 6 7 8 9 10  class Solution: def maxSubArray(self, nums: List[int]) -&amp;gt; int: # nums: [-2, 1, -3, 4, -1, 2, 1, -5, 4] # dp: [-2, 1, -2, 4, 3, 5, 6, 1, 5] dp = [0 for _ in range(len(nums))] res = dp[0] = nums[0] for i in range(1, len(nums)): dp[i] = max(nums[i], dp[i - 1] + nums[i]) res = max(dp[i], res) return res   </description>
    </item>
    
    <item>
      <title>[LeetCode] 70. Climbing Stairs</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/climbing-stairs/</link>
      <pubDate>Wed, 05 Aug 2020 01:08:33 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/climbing-stairs/</guid>
      <description>70. Climbing Stairs
python
1 2 3 4 5 6 7 8 9  class Solution: def climbStairs(self, n: int) -&amp;gt; int: if n == 1: return 1 one, two = 1, 2 for i in range(2, n): one, two = two, one + two return two   </description>
    </item>
    
    <item>
      <title>[LeetCode] 542. 01 Matrix</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/01-matrix/</link>
      <pubDate>Tue, 04 Aug 2020 01:04:00 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/01-matrix/</guid>
      <description>542. 01 Matrix
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  class Solution: def updateMatrix(self, matrix: List[List[int]]) -&amp;gt; List[List[int]]: # BFS helper def bfs(node): from collections import deque q = deque() i, j = node q.</description>
    </item>
    
    <item>
      <title>[LeetCode] 77. Combinations</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/combinations/</link>
      <pubDate>Tue, 04 Aug 2020 01:04:00 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/combinations/</guid>
      <description>77. Combinations
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def combine(self, n: int, k: int) -&amp;gt; List[List[int]]: res = [] self.dfs(range(1, n + 1), k, 0, [], res) return res def dfs(self, nums, k, idx, path, res): if k == 0: res.append(path[:]) return for i in range(idx, len(nums)): path.append(nums[i]) self.dfs(nums, k - 1, i + 1, path, res) path.</description>
    </item>
    
    <item>
      <title>[LeetCode] 46. Permutations</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/permutations/</link>
      <pubDate>Mon, 03 Aug 2020 13:29:27 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/permutations/</guid>
      <description>46. Permutations
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  class Solution: def permute(self, nums: List[int]) -&amp;gt; List[List[int]]: if not nums: return [] res, used = [], [False] * len(nums) self.dfs(nums, [], res, used) return res def dfs(self, nums, path, res, used): if len(path) == len(nums): res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 17. Letter Combinations of a Phone Number</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/letter-combinations-of-a-phone-number/</link>
      <pubDate>Mon, 03 Aug 2020 13:28:05 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/letter-combinations-of-a-phone-number/</guid>
      <description>17. Letter Combinations of a Phone Number
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution: def letterCombinations(self, digits: str) -&amp;gt; List[str]: if not digits: return [] dct = {&amp;#39;2&amp;#39;: &amp;#39;abc&amp;#39;, &amp;#39;3&amp;#39;: &amp;#39;def&amp;#39;, &amp;#39;4&amp;#39;: &amp;#39;ghi&amp;#39;, &amp;#39;5&amp;#39;: &amp;#39;jkl&amp;#39;, &amp;#39;6&amp;#39;: &amp;#39;mno&amp;#39;, &amp;#39;7&amp;#39;: &amp;#39;pqrs&amp;#39;, &amp;#39;8&amp;#39;: &amp;#39;tuv&amp;#39;, &amp;#39;9&amp;#39;: &amp;#39;wxyz&amp;#39;} res = [] self.dfs(digits, dct, 0, &amp;#39;&amp;#39;, res) return res def dfs(self, digits, dct, index, path, res): if len(path) == len(digits): res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 179. Largest Number</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/sort/largest-number/</link>
      <pubDate>Sun, 02 Aug 2020 23:58:18 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/sort/largest-number/</guid>
      <description>179. Largest Number
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class Solution: def largestNumber(self, nums: List[int]) -&amp;gt; str: # use quick sort, in-place self.quickSort(nums, 0, len(nums) - 1) return str(int(&amp;#34;&amp;#34;.join(map(str, nums)))) def quickSort(self, nums, l, r): if l &amp;gt;= r: return pos = self.partition(nums, l, r) self.quickSort(nums, l, pos - 1) self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 56. Merge Intervals</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/sort/merge-intervals/</link>
      <pubDate>Sun, 02 Aug 2020 23:56:54 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/sort/merge-intervals/</guid>
      <description>56. Merge Intervals python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution: def merge(self, intervals: List[List[int]]) -&amp;gt; List[List[int]]: if not intervals: return [] # sort intervals.sort() res = [] for interval in intervals: # 空 or 迭代的数组起点 &amp;gt; 答案最后一个数组尾巴，就进行插入</description>
    </item>
    
    <item>
      <title>[LeetCode] 1038. Binary Search Tree to Greater Sum Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/bst/binary-search-tree-to-greater-sum-tree/</link>
      <pubDate>Sat, 01 Aug 2020 23:07:01 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/bst/binary-search-tree-to-greater-sum-tree/</guid>
      <description>1038. Binary Search Tree to Greater Sum Tree
python
1 2 3 4 5 6 7 8 9 10 11 12 13  class Solution: def bstToGst(self, root: TreeNode) -&amp;gt; TreeNode: self.sum = 0 self.helper(root) return root def helper(self, node): if not node: return self.helper(node.right) node.val += self.sum self.sum = node.val self.helper(node.left)   </description>
    </item>
    
    <item>
      <title>[LeetCode] 109. Convert Sorted List to Binary Search Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/bst/convert-sorted-list-to-binary-search-tree/</link>
      <pubDate>Sat, 01 Aug 2020 23:07:01 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/bst/convert-sorted-list-to-binary-search-tree/</guid>
      <description>109. Convert Sorted List to Binary Search Tree
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Solution: def sortedListToBST(self, head: ListNode) -&amp;gt; TreeNode: lst = [] while head: lst.append(head.val) head = head.next return self.helper(lst, 0, len(lst) - 1) def helper(self, lst, start, end): if start &amp;gt; end: return None if start == end: return TreeNode(lst[start]) mid = (start + end) &amp;gt;&amp;gt; 1 root = TreeNode(lst[mid]) root.</description>
    </item>
    
    <item>
      <title>[LeetCode] 235. Lowest Common Ancestor of a Binary Search Tree</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/bst/lowest-common-ancestor-of-a-binary-search-tree/</link>
      <pubDate>Fri, 31 Jul 2020 22:58:39 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/bst/lowest-common-ancestor-of-a-binary-search-tree/</guid>
      <description>235. Lowest Common Ancestor of a Binary Search Tree
python
1 2 3 4 5 6 7 8 9 10  class Solution: def lowestCommonAncestor(self, root: &amp;#39;TreeNode&amp;#39;, p: &amp;#39;TreeNode&amp;#39;, q: &amp;#39;TreeNode&amp;#39;) -&amp;gt; &amp;#39;TreeNode&amp;#39;: if not root: return None if (root.val - p.val) * (root.val - q.val) &amp;lt;= 0: return root elif root.val &amp;gt; p.val and root.val &amp;gt; q.val: return self.lowestCommonAncestor(root.left, p, q) else: return self.lowestCommonAncestor(root.right, p, q)   </description>
    </item>
    
    <item>
      <title>[LeetCode] 240. Search a 2D Matrix II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/binary_search/search-a-2d-matrix-ii/</link>
      <pubDate>Fri, 31 Jul 2020 22:58:39 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/binary_search/search-a-2d-matrix-ii/</guid>
      <description>240. Search a 2D Matrix II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution: def searchMatrix(self, matrix, target): if not matrix or not target: return False rows, cols = len(matrix), len(matrix[0]) row, col = rows - 1, 0 while row &amp;gt;= 0 and col &amp;lt;= cols - 1: if matrix[row][col] == target: return True elif matrix[row][col] &amp;gt; target: row -= 1 else: col += 1 return False   </description>
    </item>
    
  </channel>
</rss>