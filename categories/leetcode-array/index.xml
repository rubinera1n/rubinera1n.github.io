<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode-array on Rubinera1n&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/categories/leetcode-array/</link>
    <description>Recent content in leetcode-array on Rubinera1n&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 12 Jul 2020 22:53:05 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/categories/leetcode-array/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 34. Find First and Last Position of Element in Sorted Array</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/find-first-and-last-position-of-element-in-sorted-array/</link>
      <pubDate>Sun, 12 Jul 2020 22:53:05 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/find-first-and-last-position-of-element-in-sorted-array/</guid>
      <description>34. Find First and Last Position of Element in Sorted Array
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  class Solution: def searchRange(self, nums: List[int], target: int) -&amp;gt; List[int]: if not nums: return [-1, -1] l, r = 0, len(nums) while l &amp;lt; r: mid = l + (r - l) // 2 if nums[mid] &amp;gt;= target: r = mid else: l = mid + 1 # tmp  start = l l, r = 0, len(nums) while l &amp;lt; r: mid = l + (r - l) // 2 if nums[mid] &amp;gt; target: r = mid else: l = mid + 1 end = l return [-1, -1] if start == end else [start, end - 1]   go</description>
    </item>
    
    <item>
      <title>[LeetCode] 33. Search in Rotated Sorted Array</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/search-in-rotated-sorted-array/</link>
      <pubDate>Sun, 12 Jul 2020 22:33:12 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/search-in-rotated-sorted-array/</guid>
      <description>33. Search in Rotated Sorted Array
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Solution: def search(self, nums: List[int], target: int) -&amp;gt; int: l, r = 0, len(nums) - 1 while l &amp;lt;= r: mid = l + (r - l) // 2 if nums[mid] == target: return mid elif nums[l] &amp;lt;= nums[mid]: if nums[l] &amp;lt;= target &amp;lt; nums[mid]: r = mid - 1 else: l = mid + 1 elif nums[mid] &amp;lt;= nums[r]: if nums[mid] &amp;lt; target &amp;lt;= nums[r]: l = mid + 1 else: r = mid - 1 return -1   go</description>
    </item>
    
    <item>
      <title>[LeetCode] 40. Combination Sum II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/combination-sum-ii/</link>
      <pubDate>Sat, 11 Jul 2020 22:14:56 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/combination-sum-ii/</guid>
      <description>40. Combination Sum II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution: def combinationSum2(self, candidates: List[int], target: int) -&amp;gt; List[List[int]]: res = [] candidates.sort() self.dfs(candidates, target, 0, [], res) return res def dfs(self, lst, target, index, path, res): if target &amp;lt; 0: return if target == 0: res.append(path) return res for i in range(index, len(lst)): if i &amp;gt; index and lst[i] == lst[i-1]: continue self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 39. Combination Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/combination-sum/</link>
      <pubDate>Sat, 11 Jul 2020 22:13:05 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/combination-sum/</guid>
      <description>39. Combination Sum
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def combinationSum(self, candidates: List[int], target: int) -&amp;gt; List[List[int]]: res = [] candidates.sort() self.dfs(candidates, target, 0, [], res) return res def dfs(self, nums, target, idx, path, res): if target &amp;lt; 0: return if target == 0: res.append(path) return for i in range(idx, len(nums)): self.dfs(nums, target - nums[i], i, path + [nums[i]], res)   go</description>
    </item>
    
    <item>
      <title>[LeetCode] 118. Pascal&#39;s Triangle</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/pascals-triangle/</link>
      <pubDate>Fri, 10 Jul 2020 22:09:11 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/pascals-triangle/</guid>
      <description>118. Pascal&amp;rsquo;s Triangle
python
1 2 3 4 5 6 7 8 9 10 11  class Solution: def generate(self, numRows: int) -&amp;gt; List[List[int]]: res = [] for i in range(numRows): res.append([]) for j in range(i + 1): if j in (0, i): res[i].append(1) else: res[i].append(res[i-1][j-1] + res[i-1][j]) return res   go
   </description>
    </item>
    
    <item>
      <title>[LeetCode] 66. Plus One</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/plus-one/</link>
      <pubDate>Fri, 10 Jul 2020 22:06:44 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/plus-one/</guid>
      <description>66. Plus One
python
1 2 3  class Solution: def plusOne(self, digits: List[int]) -&amp;gt; List[int]: return [int(a) for a in (str(int(&amp;#39;&amp;#39;.join(map(str, digits))) + 1))]   go
   </description>
    </item>
    
    <item>
      <title>[LeetCode] 59. Spiral Matrix II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/spiral-matrix-ii/</link>
      <pubDate>Thu, 09 Jul 2020 21:58:53 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/spiral-matrix-ii/</guid>
      <description>59. Spiral Matrix II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class Solution: def generateMatrix(self, n): if not n: return [] res = [[0 for _ in range(n)] for _ in range(n)] left, right, top, down, num = 0, n-1, 0, n-1, 1 while left &amp;lt;= right and top &amp;lt;= down: for i in range(left, right+1): res[top][i] = num num += 1 top += 1 for i in range(top, down+1): res[i][right] = num num += 1 right -= 1 for i in range(right, left-1, -1): res[down][i] = num num += 1 down -= 1 for i in range(down, top-1, -1): res[i][left] = num num += 1 left += 1 return res   go</description>
    </item>
    
    <item>
      <title>[LeetCode] 31. Next Permutation</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/next-permutation/</link>
      <pubDate>Thu, 09 Jul 2020 21:46:31 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/next-permutation/</guid>
      <description>31. Next Permutation
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Solution: def nextPermutation(self, nums: List[int]) -&amp;gt; None: i = len(nums) - 2 while i &amp;gt;= 0 and nums[i] &amp;gt;= nums[i+1]: i -= 1 if i &amp;lt; 0: # 6 5 4 3 2 1 nums.reverse() return j = len(nums) - 1 while j &amp;gt;= 0 and nums[i] &amp;gt;= nums[j]: j -= 1 nums[i], nums[j] = nums[j], nums[i] l, r = i + 1, len(nums) - 1 while l &amp;lt; r: nums[l], nums[r] = nums[r], nums[l] l += 1 r -= 1   go</description>
    </item>
    
    <item>
      <title>[LeetCode] 54. Spiral Matrix</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/spiral-matrix/</link>
      <pubDate>Wed, 08 Jul 2020 21:43:30 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/spiral-matrix/</guid>
      <description>54. Spiral Matrix python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution: def spiralOrder(self, matrix: List[List[int]]) -&amp;gt; List[int]: if not matrix: return [] res = [] left, right = 0, len(matrix[0]) - 1 top, bottom = 0, len(matrix) - 1 while</description>
    </item>
    
    <item>
      <title>[LeetCode] 48. Rotate Image</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/array/rotate-image/</link>
      <pubDate>Wed, 08 Jul 2020 21:09:12 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/array/rotate-image/</guid>
      <description>48. Rotate Image
python
1 2 3 4 5 6  class Solution: def rotate(self, matrix: List[List[int]]) -&amp;gt; None: &amp;#34;&amp;#34;&amp;#34; Do not return anything, modify matrix in-place instead. &amp;#34;&amp;#34;&amp;#34; matrix[:] = zip(*matrix[::-1])   go
   </description>
    </item>
    
  </channel>
</rss>