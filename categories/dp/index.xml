<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DP on XiuFu Guo&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/categories/dp/</link>
    <description>Recent content in DP on XiuFu Guo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 03 Jul 2020 00:58:28 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/categories/dp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 96. Unique Binary Search Trees</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-binary-search-trees/</link>
      <pubDate>Fri, 03 Jul 2020 00:58:28 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-binary-search-trees/</guid>
      <description>96. Unique Binary Search Trees
python
1 2 3 4 5 6 7 8  class Solution: def numTrees(self, n: int) -&amp;gt; int: res = [0] * (n + 1) res[0] = 1 for i in range(1, n + 1): for j in range(i): res[i] += res[j] * res[i-1-j] return res[n]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 95. Unique Binary Search Trees II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-binary-search-trees-ii/</link>
      <pubDate>Fri, 03 Jul 2020 00:56:02 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-binary-search-trees-ii/</guid>
      <description>95. Unique Binary Search Trees II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def generateTrees(self, n: int) -&amp;gt; List[TreeNode]: def generate(l, r): # split between [l, r) if l == r: return [None] nodes = [] for i in range(l, r): for lchild in generate(l, i): for rchild in generate(i+1, r): node = TreeNode(i+1) # +1 to convert the index to the actual value node.</description>
    </item>
    
  </channel>
</rss>