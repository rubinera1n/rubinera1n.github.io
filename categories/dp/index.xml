<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DP on XiuFu Guo&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/categories/dp/</link>
    <description>Recent content in DP on XiuFu Guo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 08 Aug 2020 01:21:27 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/categories/dp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 198. House Robber</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/house-robber/</link>
      <pubDate>Sat, 08 Aug 2020 01:21:27 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/house-robber/</guid>
      <description>198. House Robber
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: # Time: O(n), Space: O(1) def rob(self, nums: List[int]) -&amp;gt; int: if not nums: return 0 size = len(nums) if size == 1: return nums[0] first, second = nums[0], max(nums[0], nums[1]) for i in range(2, size): first, second = second, max(first + nums[i], second) return second   </description>
    </item>
    
    <item>
      <title>[LeetCode] 213. House Robber II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/house-robber-ii/</link>
      <pubDate>Sat, 08 Aug 2020 01:21:27 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/house-robber-ii/</guid>
      <description>213. House Robber II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Solution: # Time: O(n), Space: O(1) def rob(self, nums: List[int]) -&amp;gt; int: if not nums: return 0 if len(nums) == 1: return nums[0] return max(self.helper(nums[:-1]), self.helper(nums[1:])) def helper(self, nums): if not nums: return 0 if len(nums) == 1: return nums[0] a, b = nums[0], max(nums[:2]) for i in range(2, len(nums)): a, b = b, max(b, a + nums[i]) return b   </description>
    </item>
    
    <item>
      <title>[LeetCode] 120. Triangle</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/triangle/</link>
      <pubDate>Fri, 07 Aug 2020 01:15:48 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/triangle/</guid>
      <description>120. Triangle
python
1 2 3 4 5 6 7 8 9  class Solution: def minimumTotal(self, triangle: List[List[int]]) -&amp;gt; int: if not triangle: return 0 res = triangle[-1] for i in range(len(triangle) - 2, -1, -1): for j in range(len(triangle[i])): res[j] = min(res[j], res[j+1]) + triangle[i][j] return res[0]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 121. Best Time to Buy and Sell Stock</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/best-time-to-buy-and-sell-stock/</link>
      <pubDate>Fri, 07 Aug 2020 01:15:48 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/best-time-to-buy-and-sell-stock/</guid>
      <description>121. Best Time to Buy and Sell Stock
python
1 2 3 4 5 6 7 8 9  class Solution: def maxProfit(self, prices: List[int]) -&amp;gt; int: if not prices: return 0 minPri, maxPro = prices[0], 0 for i in range(1, len(prices)): minPri = min(minPri, prices[i]) maxPro = max(maxPro, prices[i] - minPri) return maxPro   </description>
    </item>
    
    <item>
      <title>[LeetCode] 62. Unique Paths</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-paths/</link>
      <pubDate>Thu, 06 Aug 2020 01:11:28 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-paths/</guid>
      <description>62. Unique Paths
python
1 2 3 4 5 6 7 8 9  class Solution: def uniquePaths(self, m: int, n: int) -&amp;gt; int: if not m or not n: return 0 dp = [[1 for _ in range(m)] for _ in range(n)] for row in range(1, n): for col in range(1, m): dp[row][col] = dp[row - 1][col] + dp[row][col - 1] return dp[-1][-1]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 64. Minimum Path Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/minimum-path-sum/</link>
      <pubDate>Thu, 06 Aug 2020 01:11:28 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/minimum-path-sum/</guid>
      <description>64. Minimum Path Sum
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def minPathSum(self, grid: List[List[int]]) -&amp;gt; int: if not grid: return 0 row, col = len(grid), len(grid[0]) dp = [[0 for _ in range(col)] for _ in range(row)] dp[0][0] = grid[0][0] for i in range(1, row): dp[i][0] = dp[i-1][0] + grid[i][0] for i in range(1, col): dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, row): for j in range(1, col): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 53. Maximum Subarray</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/maximum-subarray/</link>
      <pubDate>Wed, 05 Aug 2020 01:08:33 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/maximum-subarray/</guid>
      <description>53. Maximum Subarray
python
1 2 3 4 5 6 7 8 9 10  class Solution: def maxSubArray(self, nums: List[int]) -&amp;gt; int: # nums: [-2, 1, -3, 4, -1, 2, 1, -5, 4] # dp: [-2, 1, -2, 4, 3, 5, 6, 1, 5] dp = [0 for _ in range(len(nums))] res = dp[0] = nums[0] for i in range(1, len(nums)): dp[i] = max(nums[i], dp[i - 1] + nums[i]) res = max(dp[i], res) return res   </description>
    </item>
    
    <item>
      <title>[LeetCode] 70. Climbing Stairs</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/climbing-stairs/</link>
      <pubDate>Wed, 05 Aug 2020 01:08:33 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/climbing-stairs/</guid>
      <description>70. Climbing Stairs
python
1 2 3 4 5 6 7 8 9  class Solution: def climbStairs(self, n: int) -&amp;gt; int: if n == 1: return 1 one, two = 1, 2 for i in range(2, n): one, two = two, one + two return two   </description>
    </item>
    
    <item>
      <title>[LeetCode] 96. Unique Binary Search Trees</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-binary-search-trees/</link>
      <pubDate>Fri, 03 Jul 2020 00:58:28 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-binary-search-trees/</guid>
      <description>96. Unique Binary Search Trees
python
1 2 3 4 5 6 7 8  class Solution: def numTrees(self, n: int) -&amp;gt; int: res = [0] * (n + 1) res[0] = 1 for i in range(1, n + 1): for j in range(i): res[i] += res[j] * res[i-1-j] return res[n]   </description>
    </item>
    
    <item>
      <title>[LeetCode] 95. Unique Binary Search Trees II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-binary-search-trees-ii/</link>
      <pubDate>Fri, 03 Jul 2020 00:56:02 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/dp/unique-binary-search-trees-ii/</guid>
      <description>95. Unique Binary Search Trees II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def generateTrees(self, n: int) -&amp;gt; List[TreeNode]: def generate(l, r): # split between [l, r) if l == r: return [None] nodes = [] for i in range(l, r): for lchild in generate(l, i): for rchild in generate(i+1, r): node = TreeNode(i+1) # +1 to convert the index to the actual value node.</description>
    </item>
    
  </channel>
</rss>