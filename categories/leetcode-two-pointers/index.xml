<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode-two-pointers on Rubinera1n&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/categories/leetcode-two-pointers/</link>
    <description>Recent content in leetcode-two-pointers on Rubinera1n&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 23 Jul 2020 14:58:16 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/categories/leetcode-two-pointers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 16. 3Sum Closest</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/3sum-closest/</link>
      <pubDate>Thu, 23 Jul 2020 14:58:16 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/3sum-closest/</guid>
      <description>16. 3Sum Closest
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Solution: def threeSumClosest(self, nums: List[int], target: int) -&amp;gt; int: nums.sort() d = sys.maxsize res = 0 for i in range(len(nums) - 2): l, r = i + 1, len(nums) - 1 while l &amp;lt; r: s = nums[i] + nums[l] + nums[r] if s == target: return s diff = abs(s - target) if diff &amp;lt; d: d = diff res = s if s &amp;lt; target: l += 1 else: r -= 1 return res   </description>
    </item>
    
    <item>
      <title>[LeetCode] 18. 4Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/4sum/</link>
      <pubDate>Thu, 23 Jul 2020 14:58:16 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/4sum/</guid>
      <description>18. 4Sum
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  class Solution: def fourSum(self, nums: List[int], target: int) -&amp;gt; List[List[int]]: nums.sort() res = [] self.findNSum(nums, target, 4, [], res) return res def findNSum(self, nums, target, N, path, res): if len(nums) &amp;lt; N or N &amp;lt; 2: return # solve 2-sum if N == 2: l, r = 0, len(nums) - 1 while l &amp;lt; r: if nums[l] + nums[r] == target: res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 11. Container With Most Water</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/container-with-most-water/</link>
      <pubDate>Wed, 22 Jul 2020 14:58:16 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/container-with-most-water/</guid>
      <description>11. Container With Most Water
python
1 2 3 4 5 6 7 8 9 10 11 12  class Solution: def maxArea(self, height: List[int]) -&amp;gt; int: if len(height) &amp;lt; 2: return 0 area, l, r = 0, 0, len(height) - 1 while l &amp;lt; r: area = max(area, min(height[l], height[r]) * (r - l)) if height[l] &amp;lt; height[r]: l += 1 else: r -= 1 return area   </description>
    </item>
    
    <item>
      <title>[LeetCode] 15. 3Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/3sum/</link>
      <pubDate>Wed, 22 Jul 2020 14:58:16 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/two_pointers/3sum/</guid>
      <description>15. 3Sum
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class Solution: def threeSum(self, nums: List[int]) -&amp;gt; List[List[int]]: res = [] nums.sort() for i in range(len(nums) - 2): # pass duplicate if i &amp;gt; 0 and nums[i] == nums[i - 1]: continue l, r = i + 1, len(nums) - 1 while l &amp;lt; r: s = nums[i] + nums[l] + nums[r] if s &amp;lt; 0: l += 1 elif s &amp;gt; 0: r -= 1 else: res.</description>
    </item>
    
  </channel>
</rss>