<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Search on XiuFu Guo&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/categories/search/</link>
    <description>Recent content in Search on XiuFu Guo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Aug 2020 13:29:27 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/categories/search/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 46. Permutations</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/permutations/</link>
      <pubDate>Mon, 03 Aug 2020 13:29:27 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/permutations/</guid>
      <description>46. Permutations
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  class Solution: def permute(self, nums: List[int]) -&amp;gt; List[List[int]]: if not nums: return [] res, used = [], [False] * len(nums) self.dfs(nums, [], res, used) return res def dfs(self, nums, path, res, used): if len(path) == len(nums): res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 17. Letter Combinations of a Phone Number</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/letter-combinations-of-a-phone-number/</link>
      <pubDate>Mon, 03 Aug 2020 13:28:05 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/letter-combinations-of-a-phone-number/</guid>
      <description>17. Letter Combinations of a Phone Number
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution: def letterCombinations(self, digits: str) -&amp;gt; List[str]: if not digits: return [] dct = {&amp;#39;2&amp;#39;: &amp;#39;abc&amp;#39;, &amp;#39;3&amp;#39;: &amp;#39;def&amp;#39;, &amp;#39;4&amp;#39;: &amp;#39;ghi&amp;#39;, &amp;#39;5&amp;#39;: &amp;#39;jkl&amp;#39;, &amp;#39;6&amp;#39;: &amp;#39;mno&amp;#39;, &amp;#39;7&amp;#39;: &amp;#39;pqrs&amp;#39;, &amp;#39;8&amp;#39;: &amp;#39;tuv&amp;#39;, &amp;#39;9&amp;#39;: &amp;#39;wxyz&amp;#39;} res = [] self.dfs(digits, dct, 0, &amp;#39;&amp;#39;, res) return res def dfs(self, digits, dct, index, path, res): if len(path) == len(digits): res.</description>
    </item>
    
    <item>
      <title>[LeetCode] 212. Word Search II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/word-search-ii/</link>
      <pubDate>Thu, 30 Jul 2020 22:55:38 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/word-search-ii/</guid>
      <description>212. Word Search II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  class TrieNode(): def __init__(self): self.children = collections.defaultdict(TrieNode) self.isWord = False class Trie(): def __init__(self): self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 79. Word Search</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/word-search/</link>
      <pubDate>Thu, 30 Jul 2020 22:53:46 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/word-search/</guid>
      <description>79. Word Search
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Solution: def exist(self, board: List[List[str]], word: str) -&amp;gt; bool: if not board: return False for i in range(len(board)): for j in range(len(board[0])): if self.dfs(board, i, j, word): return True return False def dfs(self, board, i, j, word): if len(word) == 0: return True if i &amp;lt; 0 or i &amp;gt;= len(board) or j &amp;lt; 0 or j &amp;gt;= len(board[0]) or word[0] !</description>
    </item>
    
    <item>
      <title>[LeetCode] 216. Combination Sum III</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/combination-sum-iii/</link>
      <pubDate>Tue, 14 Jul 2020 11:49:43 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/combination-sum-iii/</guid>
      <description>216. Combination Sum III
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution: def combinationSum3(self, k: int, n: int) -&amp;gt; List[List[int]]: res = [] self.dfs(range(1, 10), k, n, 0, [], res) return res def dfs(self, nums, k, n, index, path, res): if k &amp;lt; 0 or n &amp;lt; 0: return if k == 0 and n == 0: res.append(path) return for i in range(index, len(nums)): self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 40. Combination Sum II</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/combination-sum-ii/</link>
      <pubDate>Sat, 11 Jul 2020 22:14:56 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/combination-sum-ii/</guid>
      <description>40. Combination Sum II
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution: def combinationSum2(self, candidates: List[int], target: int) -&amp;gt; List[List[int]]: res = [] candidates.sort() self.dfs(candidates, target, 0, [], res) return res def dfs(self, lst, target, index, path, res): if target &amp;lt; 0: return if target == 0: res.append(path) return res for i in range(index, len(lst)): if i &amp;gt; index and lst[i] == lst[i-1]: continue self.</description>
    </item>
    
    <item>
      <title>[LeetCode] 39. Combination Sum</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/search/combination-sum/</link>
      <pubDate>Sat, 11 Jul 2020 22:13:05 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/search/combination-sum/</guid>
      <description>39. Combination Sum
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def combinationSum(self, candidates: List[int], target: int) -&amp;gt; List[List[int]]: res = [] candidates.sort() self.dfs(candidates, target, 0, [], res) return res def dfs(self, nums, target, idx, path, res): if target &amp;lt; 0: return if target == 0: res.append(path) return for i in range(idx, len(nums)): self.dfs(nums, target - nums[i], i, path + [nums[i]], res)   </description>
    </item>
    
  </channel>
</rss>