<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sorting and search on Rubinera1n&#39;s Blog</title>
    <link>https://blog.xiufuguo.com/tags/sorting-and-search/</link>
    <description>Recent content in sorting and search on Rubinera1n&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Jul 2020 00:36:37 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xiufuguo.com/tags/sorting-and-search/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[LeetCode] 74. Search a 2D Matrix</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/sorting_and_search/search-a-2d-matrix/</link>
      <pubDate>Wed, 29 Jul 2020 00:36:37 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/sorting_and_search/search-a-2d-matrix/</guid>
      <description>74. Search a 2D Matrix
python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  class Solution: def searchMatrix(self, matrix: List[List[int]], target: int) -&amp;gt; bool: if not matrix or target is None: return False row, col = len(matrix), len(matrix[0]) low, high = 0, row * col - 1 while low &amp;lt;= high: mid = low + (high - low) // 2 num = matrix[mid // col][mid % col] if num == target: return True elif num &amp;lt; target: low = mid + 1 else: high = mid - 1 return False   </description>
    </item>
    
    <item>
      <title>[LeetCode] 35. Search Insert Position</title>
      <link>https://blog.xiufuguo.com/post/leetcode/tags/sorting_and_search/search-insert-position/</link>
      <pubDate>Wed, 29 Jul 2020 00:30:42 +0800</pubDate>
      
      <guid>https://blog.xiufuguo.com/post/leetcode/tags/sorting_and_search/search-insert-position/</guid>
      <description>35. Search Insert Position
python
1 2 3 4 5 6 7 8 9 10  class Solution: def searchInsert(self, nums: List[int], target: int) -&amp;gt; int: l, r = 0, len(nums) while l &amp;lt; r: mid = l + (r - l) // 2 if nums[mid] &amp;lt; target: l = mid + 1 else: r = mid return l   </description>
    </item>
    
  </channel>
</rss>